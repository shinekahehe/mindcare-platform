"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import logging

# Import environment configuration
from .settings_env import ENV_CONFIG

# Import database URL parser
try:
    import dj_database_url  # type: ignore
except ImportError:
    dj_database_url = None

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ENV_CONFIG.get('SECRET_KEY', 'django-insecure-e8%q@h1rxa8tp7r)m91u(7it5wwhe3(e-8uz00!*-d1st7drl%')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = ENV_CONFIG['DEBUG']

ALLOWED_HOSTS = ENV_CONFIG['ALLOWED_HOSTS']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    'base.apps.BaseConfig'
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates"
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration
if ENV_CONFIG.get("DATABASE_URL"):
    try:
        DATABASES = {
            "default": dj_database_url.config(
                default=ENV_CONFIG["DATABASE_URL"],
                conn_max_age=600,
                ssl_require=True,
            )
        }
        logger.info("✅ Using PostgreSQL from DATABASE_URL")
    except Exception as e:
        logger.error(f"❌ Failed to parse DATABASE_URL: {e}")
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.sqlite3",
                "NAME": BASE_DIR / "db.sqlite3",
            }
        }
        logger.info("➡️ Falling back to SQLite")
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
    logger.info("✅ Using SQLite (no DATABASE_URL found)")


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Supabase Configuration
SUPABASE_URL = ENV_CONFIG['SUPABASE_URL']
SUPABASE_ANON_KEY = ENV_CONFIG['SUPABASE_ANON_KEY']
SUPABASE_SERVICE_ROLE_KEY = ENV_CONFIG['SUPABASE_SERVICE_ROLE_KEY']
SUPABASE_PROJECT_REF = ENV_CONFIG['SUPABASE_PROJECT_REF']

# Gemini API Configuration
GEMINI_API_KEY = ENV_CONFIG['GEMINI_API_KEY']

# CSRF Configuration for production
CSRF_TRUSTED_ORIGINS = [
    'https://mindcare-platform-1.onrender.com',
    'https://mindcare-platform.onrender.com',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
]

# CORS Configuration (if needed for API calls)
CORS_ALLOWED_ORIGINS = [
    'https://mindcare-platform-1.onrender.com',
    'https://mindcare-platform.onrender.com',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
]
