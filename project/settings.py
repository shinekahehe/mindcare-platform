"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import logging

# Import environment configuration
from .settings_env import ENV_CONFIG

# Debug: Log environment variables on startup
import logging
logger = logging.getLogger(__name__)
logger.info("=== ENVIRONMENT VARIABLES DEBUG ===")
logger.info(f"GEMINI_API_KEY from os.getenv: {'SET' if os.getenv('GEMINI_API_KEY') else 'NOT SET'}")
logger.info(f"SUPABASE_URL from os.getenv: {'SET' if os.getenv('SUPABASE_URL') else 'NOT SET'}")
logger.info(f"RENDER env var: {'SET' if os.getenv('RENDER') else 'NOT SET'}")
logger.info("=== END ENVIRONMENT DEBUG ===")

# Import database URL parser
try:
    import dj_database_url  # type: ignore
except ImportError:
    dj_database_url = None

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ENV_CONFIG['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = ENV_CONFIG['DEBUG']

ALLOWED_HOSTS = ENV_CONFIG['ALLOWED_HOSTS']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    'base.apps.BaseConfig'
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates"
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration with fallback
def get_database_config():
    """Get database configuration with fallback to SQLite"""
    if ENV_CONFIG['DATABASE_URL'] and dj_database_url and os.getenv("RENDER"):
        try:
            # Test if we can parse the database URL
            db_config = dj_database_url.parse(ENV_CONFIG['DATABASE_URL'])
            logger.info("Using PostgreSQL database from DATABASE_URL (Render)")
            return db_config
        except Exception as e:
            logger.error(f"Failed to parse DATABASE_URL: {e}")
            logger.info("Falling back to SQLite database")
    
    # Use SQLite as fallback
    return {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }

DATABASES = {
    'default': get_database_config()
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Supabase Configuration
SUPABASE_URL = ENV_CONFIG['SUPABASE_URL']
SUPABASE_ANON_KEY = ENV_CONFIG['SUPABASE_ANON_KEY']
SUPABASE_SERVICE_ROLE_KEY = ENV_CONFIG['SUPABASE_SERVICE_ROLE_KEY']
SUPABASE_PROJECT_REF = ENV_CONFIG.get('SUPABASE_PROJECT_REF')

# Gemini API Configuration
GEMINI_API_KEY = ENV_CONFIG['GEMINI_API_KEY']
